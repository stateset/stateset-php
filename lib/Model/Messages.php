<?php
/**
 * Messages
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stateset
 *
 * This is the Stateset One API based on The OpenAPI Specification. # Introduction This API definition is intended to to be a good starting point for describing your API in [OpenAPI/Swagger format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md). # OpenAPI Specification The goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined via OpenAPI, a consumer can  understand and interact with the remote service with a minimal amount of implementation logic. Similar to what interfaces have done for lower-level programming, OpenAPI removes the guesswork in calling the service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developers@stateset.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Messages Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Messages implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Messages';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'body' => 'string',
        'to' => 'string',
        'from' => 'string',
        'sent_receipt' => 'bool',
        'delivered_receipt' => 'bool',
        'from_me' => 'bool',
        'user_id' => 'string',
        'username' => 'string',
        'is_public' => 'bool',
        'created_at' => '\DateTime',
        'date' => '\DateTime',
        'time' => 'string',
        'timestamp' => 'string',
        'message_number' => 'int',
        'is_code' => 'bool',
        'likes' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'body' => null,
        'to' => null,
        'from' => null,
        'sent_receipt' => null,
        'delivered_receipt' => null,
        'from_me' => null,
        'user_id' => null,
        'username' => null,
        'is_public' => null,
        'created_at' => 'date-time',
        'date' => 'date',
        'time' => 'time',
        'timestamp' => null,
        'message_number' => null,
        'is_code' => null,
        'likes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'body' => false,
		'to' => false,
		'from' => false,
		'sent_receipt' => false,
		'delivered_receipt' => false,
		'from_me' => false,
		'user_id' => false,
		'username' => false,
		'is_public' => false,
		'created_at' => false,
		'date' => false,
		'time' => false,
		'timestamp' => false,
		'message_number' => false,
		'is_code' => false,
		'likes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'body' => 'body',
        'to' => 'to',
        'from' => 'from',
        'sent_receipt' => 'sentReceipt',
        'delivered_receipt' => 'deliveredReceipt',
        'from_me' => 'fromMe',
        'user_id' => 'user_id',
        'username' => 'username',
        'is_public' => 'is_public',
        'created_at' => 'created_at',
        'date' => 'date',
        'time' => 'time',
        'timestamp' => 'timestamp',
        'message_number' => 'messageNumber',
        'is_code' => 'isCode',
        'likes' => 'likes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'body' => 'setBody',
        'to' => 'setTo',
        'from' => 'setFrom',
        'sent_receipt' => 'setSentReceipt',
        'delivered_receipt' => 'setDeliveredReceipt',
        'from_me' => 'setFromMe',
        'user_id' => 'setUserId',
        'username' => 'setUsername',
        'is_public' => 'setIsPublic',
        'created_at' => 'setCreatedAt',
        'date' => 'setDate',
        'time' => 'setTime',
        'timestamp' => 'setTimestamp',
        'message_number' => 'setMessageNumber',
        'is_code' => 'setIsCode',
        'likes' => 'setLikes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'body' => 'getBody',
        'to' => 'getTo',
        'from' => 'getFrom',
        'sent_receipt' => 'getSentReceipt',
        'delivered_receipt' => 'getDeliveredReceipt',
        'from_me' => 'getFromMe',
        'user_id' => 'getUserId',
        'username' => 'getUsername',
        'is_public' => 'getIsPublic',
        'created_at' => 'getCreatedAt',
        'date' => 'getDate',
        'time' => 'getTime',
        'timestamp' => 'getTimestamp',
        'message_number' => 'getMessageNumber',
        'is_code' => 'getIsCode',
        'likes' => 'getLikes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('sent_receipt', $data ?? [], null);
        $this->setIfExists('delivered_receipt', $data ?? [], null);
        $this->setIfExists('from_me', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('is_public', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('time', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('message_number', $data ?? [], null);
        $this->setIfExists('is_code', $data ?? [], null);
        $this->setIfExists('likes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier for the message
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string|null $body The body of the message
     *
     * @return self
     */
    public function setBody($body)
    {
        if (is_null($body)) {
            throw new \InvalidArgumentException('non-nullable body cannot be null');
        }
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string|null
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string|null $to The recipient of the message
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string|null $from The sender of the message
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets sent_receipt
     *
     * @return bool|null
     */
    public function getSentReceipt()
    {
        return $this->container['sent_receipt'];
    }

    /**
     * Sets sent_receipt
     *
     * @param bool|null $sent_receipt Indicates whether the message has been sent
     *
     * @return self
     */
    public function setSentReceipt($sent_receipt)
    {
        if (is_null($sent_receipt)) {
            throw new \InvalidArgumentException('non-nullable sent_receipt cannot be null');
        }
        $this->container['sent_receipt'] = $sent_receipt;

        return $this;
    }

    /**
     * Gets delivered_receipt
     *
     * @return bool|null
     */
    public function getDeliveredReceipt()
    {
        return $this->container['delivered_receipt'];
    }

    /**
     * Sets delivered_receipt
     *
     * @param bool|null $delivered_receipt Indicates whether the message has been delivered
     *
     * @return self
     */
    public function setDeliveredReceipt($delivered_receipt)
    {
        if (is_null($delivered_receipt)) {
            throw new \InvalidArgumentException('non-nullable delivered_receipt cannot be null');
        }
        $this->container['delivered_receipt'] = $delivered_receipt;

        return $this;
    }

    /**
     * Gets from_me
     *
     * @return bool|null
     */
    public function getFromMe()
    {
        return $this->container['from_me'];
    }

    /**
     * Sets from_me
     *
     * @param bool|null $from_me Indicates whether the message is from the user
     *
     * @return self
     */
    public function setFromMe($from_me)
    {
        if (is_null($from_me)) {
            throw new \InvalidArgumentException('non-nullable from_me cannot be null');
        }
        $this->container['from_me'] = $from_me;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id The ID of the user associated with the message
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username The username of the user associated with the message
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool|null
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool|null $is_public Indicates whether the message is public
     *
     * @return self
     */
    public function setIsPublic($is_public)
    {
        if (is_null($is_public)) {
            throw new \InvalidArgumentException('non-nullable is_public cannot be null');
        }
        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at The creation time of the message
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date The date of the message
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets time
     *
     * @return string|null
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param string|null $time The time of the message
     *
     * @return self
     */
    public function setTime($time)
    {
        if (is_null($time)) {
            throw new \InvalidArgumentException('non-nullable time cannot be null');
        }
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string|null $timestamp The timestamp of the message
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets message_number
     *
     * @return int|null
     */
    public function getMessageNumber()
    {
        return $this->container['message_number'];
    }

    /**
     * Sets message_number
     *
     * @param int|null $message_number The message number
     *
     * @return self
     */
    public function setMessageNumber($message_number)
    {
        if (is_null($message_number)) {
            throw new \InvalidArgumentException('non-nullable message_number cannot be null');
        }
        $this->container['message_number'] = $message_number;

        return $this;
    }

    /**
     * Gets is_code
     *
     * @return bool|null
     */
    public function getIsCode()
    {
        return $this->container['is_code'];
    }

    /**
     * Sets is_code
     *
     * @param bool|null $is_code Indicates whether the message is a code
     *
     * @return self
     */
    public function setIsCode($is_code)
    {
        if (is_null($is_code)) {
            throw new \InvalidArgumentException('non-nullable is_code cannot be null');
        }
        $this->container['is_code'] = $is_code;

        return $this;
    }

    /**
     * Gets likes
     *
     * @return int|null
     */
    public function getLikes()
    {
        return $this->container['likes'];
    }

    /**
     * Sets likes
     *
     * @param int|null $likes The number of likes for the message
     *
     * @return self
     */
    public function setLikes($likes)
    {
        if (is_null($likes)) {
            throw new \InvalidArgumentException('non-nullable likes cannot be null');
        }
        $this->container['likes'] = $likes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



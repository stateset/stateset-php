<?php
/**
 * ModelReturn
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stateset
 *
 * This is the Stateset One API based on The OpenAPI Specification. # Introduction This API definition is intended to to be a good starting point for describing your API in [OpenAPI/Swagger format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md). # OpenAPI Specification The goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined via OpenAPI, a consumer can  understand and interact with the remote service with a minimal amount of implementation logic. Similar to what interfaces have done for lower-level programming, OpenAPI removes the guesswork in calling the service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developers@stateset.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModelReturn Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModelReturn implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Return';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'status' => 'string',
        'order_id' => 'string',
        'rma' => 'string',
        'tracking_number' => 'string',
        'description' => 'string',
        'customer_email' => 'string',
        'zendesk_number' => 'string',
        'action_needed' => 'string',
        'issue' => 'string',
        'order_string' => 'string',
        'shipped_string' => 'string',
        'requested_string' => 'string',
        'entered_by' => 'string',
        'customer_id' => 'string',
        'amount' => 'string',
        'reported_condition' => 'string',
        'tax_refunded' => 'string',
        'total_refunded' => 'string',
        'created_string' => 'string',
        'reason_category' => 'string',
        'flat_rate_shipping' => 'int',
        'refunded_string' => 'string',
        'warehouse_received_string' => 'string',
        'warehouse_condition_string' => 'string',
        'fedex_status' => 'string',
        'scanned_serial_number' => 'string',
        'match' => 'string',
        'country' => 'string',
        'serial_number' => 'string',
        'condition' => 'string',
        'order_refunded' => 'bool',
        'workflow_id' => 'string',
        'sso_id' => 'string',
        'customer_email_normalized' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'status' => null,
        'order_id' => null,
        'rma' => null,
        'tracking_number' => null,
        'description' => null,
        'customer_email' => null,
        'zendesk_number' => null,
        'action_needed' => null,
        'issue' => null,
        'order_string' => null,
        'shipped_string' => null,
        'requested_string' => null,
        'entered_by' => null,
        'customer_id' => null,
        'amount' => null,
        'reported_condition' => null,
        'tax_refunded' => null,
        'total_refunded' => null,
        'created_string' => null,
        'reason_category' => null,
        'flat_rate_shipping' => null,
        'refunded_string' => null,
        'warehouse_received_string' => null,
        'warehouse_condition_string' => null,
        'fedex_status' => null,
        'scanned_serial_number' => null,
        'match' => null,
        'country' => null,
        'serial_number' => null,
        'condition' => null,
        'order_refunded' => null,
        'workflow_id' => null,
        'sso_id' => null,
        'customer_email_normalized' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'status' => false,
		'order_id' => false,
		'rma' => false,
		'tracking_number' => false,
		'description' => false,
		'customer_email' => false,
		'zendesk_number' => false,
		'action_needed' => false,
		'issue' => false,
		'order_string' => false,
		'shipped_string' => false,
		'requested_string' => false,
		'entered_by' => false,
		'customer_id' => false,
		'amount' => false,
		'reported_condition' => false,
		'tax_refunded' => false,
		'total_refunded' => false,
		'created_string' => false,
		'reason_category' => false,
		'flat_rate_shipping' => false,
		'refunded_string' => false,
		'warehouse_received_string' => false,
		'warehouse_condition_string' => false,
		'fedex_status' => false,
		'scanned_serial_number' => false,
		'match' => false,
		'country' => false,
		'serial_number' => false,
		'condition' => false,
		'order_refunded' => false,
		'workflow_id' => false,
		'sso_id' => false,
		'customer_email_normalized' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'status' => 'status',
        'order_id' => 'order_id',
        'rma' => 'rma',
        'tracking_number' => 'tracking_number',
        'description' => 'description',
        'customer_email' => 'customer_email',
        'zendesk_number' => 'zendesk_number',
        'action_needed' => 'action_needed',
        'issue' => 'issue',
        'order_string' => 'order_string',
        'shipped_string' => 'shipped_string',
        'requested_string' => 'requested_string',
        'entered_by' => 'enteredBy',
        'customer_id' => 'customer_id',
        'amount' => 'amount',
        'reported_condition' => 'reported_condition',
        'tax_refunded' => 'tax_refunded',
        'total_refunded' => 'total_refunded',
        'created_string' => 'created_string',
        'reason_category' => 'reason_category',
        'flat_rate_shipping' => 'flat_rate_shipping',
        'refunded_string' => 'refunded_string',
        'warehouse_received_string' => 'warehouse_received_string',
        'warehouse_condition_string' => 'warehouse_condition_string',
        'fedex_status' => 'fedex_status',
        'scanned_serial_number' => 'scanned_serial_number',
        'match' => 'match',
        'country' => 'country',
        'serial_number' => 'serial_number',
        'condition' => 'condition',
        'order_refunded' => 'order_refunded',
        'workflow_id' => 'workflow_id',
        'sso_id' => 'sso_id',
        'customer_email_normalized' => 'customer_email_normalized'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'order_id' => 'setOrderId',
        'rma' => 'setRma',
        'tracking_number' => 'setTrackingNumber',
        'description' => 'setDescription',
        'customer_email' => 'setCustomerEmail',
        'zendesk_number' => 'setZendeskNumber',
        'action_needed' => 'setActionNeeded',
        'issue' => 'setIssue',
        'order_string' => 'setOrderString',
        'shipped_string' => 'setShippedString',
        'requested_string' => 'setRequestedString',
        'entered_by' => 'setEnteredBy',
        'customer_id' => 'setCustomerId',
        'amount' => 'setAmount',
        'reported_condition' => 'setReportedCondition',
        'tax_refunded' => 'setTaxRefunded',
        'total_refunded' => 'setTotalRefunded',
        'created_string' => 'setCreatedString',
        'reason_category' => 'setReasonCategory',
        'flat_rate_shipping' => 'setFlatRateShipping',
        'refunded_string' => 'setRefundedString',
        'warehouse_received_string' => 'setWarehouseReceivedString',
        'warehouse_condition_string' => 'setWarehouseConditionString',
        'fedex_status' => 'setFedexStatus',
        'scanned_serial_number' => 'setScannedSerialNumber',
        'match' => 'setMatch',
        'country' => 'setCountry',
        'serial_number' => 'setSerialNumber',
        'condition' => 'setCondition',
        'order_refunded' => 'setOrderRefunded',
        'workflow_id' => 'setWorkflowId',
        'sso_id' => 'setSsoId',
        'customer_email_normalized' => 'setCustomerEmailNormalized'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'order_id' => 'getOrderId',
        'rma' => 'getRma',
        'tracking_number' => 'getTrackingNumber',
        'description' => 'getDescription',
        'customer_email' => 'getCustomerEmail',
        'zendesk_number' => 'getZendeskNumber',
        'action_needed' => 'getActionNeeded',
        'issue' => 'getIssue',
        'order_string' => 'getOrderString',
        'shipped_string' => 'getShippedString',
        'requested_string' => 'getRequestedString',
        'entered_by' => 'getEnteredBy',
        'customer_id' => 'getCustomerId',
        'amount' => 'getAmount',
        'reported_condition' => 'getReportedCondition',
        'tax_refunded' => 'getTaxRefunded',
        'total_refunded' => 'getTotalRefunded',
        'created_string' => 'getCreatedString',
        'reason_category' => 'getReasonCategory',
        'flat_rate_shipping' => 'getFlatRateShipping',
        'refunded_string' => 'getRefundedString',
        'warehouse_received_string' => 'getWarehouseReceivedString',
        'warehouse_condition_string' => 'getWarehouseConditionString',
        'fedex_status' => 'getFedexStatus',
        'scanned_serial_number' => 'getScannedSerialNumber',
        'match' => 'getMatch',
        'country' => 'getCountry',
        'serial_number' => 'getSerialNumber',
        'condition' => 'getCondition',
        'order_refunded' => 'getOrderRefunded',
        'workflow_id' => 'getWorkflowId',
        'sso_id' => 'getSsoId',
        'customer_email_normalized' => 'getCustomerEmailNormalized'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('rma', $data ?? [], null);
        $this->setIfExists('tracking_number', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('customer_email', $data ?? [], null);
        $this->setIfExists('zendesk_number', $data ?? [], null);
        $this->setIfExists('action_needed', $data ?? [], null);
        $this->setIfExists('issue', $data ?? [], null);
        $this->setIfExists('order_string', $data ?? [], null);
        $this->setIfExists('shipped_string', $data ?? [], null);
        $this->setIfExists('requested_string', $data ?? [], null);
        $this->setIfExists('entered_by', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('reported_condition', $data ?? [], null);
        $this->setIfExists('tax_refunded', $data ?? [], null);
        $this->setIfExists('total_refunded', $data ?? [], null);
        $this->setIfExists('created_string', $data ?? [], 'now()');
        $this->setIfExists('reason_category', $data ?? [], null);
        $this->setIfExists('flat_rate_shipping', $data ?? [], null);
        $this->setIfExists('refunded_string', $data ?? [], null);
        $this->setIfExists('warehouse_received_string', $data ?? [], null);
        $this->setIfExists('warehouse_condition_string', $data ?? [], null);
        $this->setIfExists('fedex_status', $data ?? [], null);
        $this->setIfExists('scanned_serial_number', $data ?? [], null);
        $this->setIfExists('match', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('serial_number', $data ?? [], null);
        $this->setIfExists('condition', $data ?? [], null);
        $this->setIfExists('order_refunded', $data ?? [], false);
        $this->setIfExists('workflow_id', $data ?? [], null);
        $this->setIfExists('sso_id', $data ?? [], null);
        $this->setIfExists('customer_email_normalized', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of the return.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id The order ID associated with the return.
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets rma
     *
     * @return string|null
     */
    public function getRma()
    {
        return $this->container['rma'];
    }

    /**
     * Sets rma
     *
     * @param string|null $rma The return merchandise authorization number.
     *
     * @return self
     */
    public function setRma($rma)
    {
        if (is_null($rma)) {
            throw new \InvalidArgumentException('non-nullable rma cannot be null');
        }
        $this->container['rma'] = $rma;

        return $this;
    }

    /**
     * Gets tracking_number
     *
     * @return string|null
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     *
     * @param string|null $tracking_number The tracking number of the returned item.
     *
     * @return self
     */
    public function setTrackingNumber($tracking_number)
    {
        if (is_null($tracking_number)) {
            throw new \InvalidArgumentException('non-nullable tracking_number cannot be null');
        }
        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A description of the return.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets customer_email
     *
     * @return string|null
     */
    public function getCustomerEmail()
    {
        return $this->container['customer_email'];
    }

    /**
     * Sets customer_email
     *
     * @param string|null $customer_email The email address of the customer who initiated the return.
     *
     * @return self
     */
    public function setCustomerEmail($customer_email)
    {
        if (is_null($customer_email)) {
            throw new \InvalidArgumentException('non-nullable customer_email cannot be null');
        }
        $this->container['customer_email'] = $customer_email;

        return $this;
    }

    /**
     * Gets zendesk_number
     *
     * @return string|null
     */
    public function getZendeskNumber()
    {
        return $this->container['zendesk_number'];
    }

    /**
     * Sets zendesk_number
     *
     * @param string|null $zendesk_number The unique identifier of the Zendesk ticket associated with the return.
     *
     * @return self
     */
    public function setZendeskNumber($zendesk_number)
    {
        if (is_null($zendesk_number)) {
            throw new \InvalidArgumentException('non-nullable zendesk_number cannot be null');
        }
        $this->container['zendesk_number'] = $zendesk_number;

        return $this;
    }

    /**
     * Gets action_needed
     *
     * @return string|null
     */
    public function getActionNeeded()
    {
        return $this->container['action_needed'];
    }

    /**
     * Sets action_needed
     *
     * @param string|null $action_needed Any action required to process the return.
     *
     * @return self
     */
    public function setActionNeeded($action_needed)
    {
        if (is_null($action_needed)) {
            throw new \InvalidArgumentException('non-nullable action_needed cannot be null');
        }
        $this->container['action_needed'] = $action_needed;

        return $this;
    }

    /**
     * Gets issue
     *
     * @return string|null
     */
    public function getIssue()
    {
        return $this->container['issue'];
    }

    /**
     * Sets issue
     *
     * @param string|null $issue The reason for the return.
     *
     * @return self
     */
    public function setIssue($issue)
    {
        if (is_null($issue)) {
            throw new \InvalidArgumentException('non-nullable issue cannot be null');
        }
        $this->container['issue'] = $issue;

        return $this;
    }

    /**
     * Gets order_string
     *
     * @return string|null
     */
    public function getOrderString()
    {
        return $this->container['order_string'];
    }

    /**
     * Sets order_string
     *
     * @param string|null $order_string The string the order was placed.
     *
     * @return self
     */
    public function setOrderString($order_string)
    {
        if (is_null($order_string)) {
            throw new \InvalidArgumentException('non-nullable order_string cannot be null');
        }
        $this->container['order_string'] = $order_string;

        return $this;
    }

    /**
     * Gets shipped_string
     *
     * @return string|null
     */
    public function getShippedString()
    {
        return $this->container['shipped_string'];
    }

    /**
     * Sets shipped_string
     *
     * @param string|null $shipped_string The string the order was shipped.
     *
     * @return self
     */
    public function setShippedString($shipped_string)
    {
        if (is_null($shipped_string)) {
            throw new \InvalidArgumentException('non-nullable shipped_string cannot be null');
        }
        $this->container['shipped_string'] = $shipped_string;

        return $this;
    }

    /**
     * Gets requested_string
     *
     * @return string|null
     */
    public function getRequestedString()
    {
        return $this->container['requested_string'];
    }

    /**
     * Sets requested_string
     *
     * @param string|null $requested_string The string the return was requested.
     *
     * @return self
     */
    public function setRequestedString($requested_string)
    {
        if (is_null($requested_string)) {
            throw new \InvalidArgumentException('non-nullable requested_string cannot be null');
        }
        $this->container['requested_string'] = $requested_string;

        return $this;
    }

    /**
     * Gets entered_by
     *
     * @return string|null
     */
    public function getEnteredBy()
    {
        return $this->container['entered_by'];
    }

    /**
     * Sets entered_by
     *
     * @param string|null $entered_by The name of the employee who entered the return into the system.
     *
     * @return self
     */
    public function setEnteredBy($entered_by)
    {
        if (is_null($entered_by)) {
            throw new \InvalidArgumentException('non-nullable entered_by cannot be null');
        }
        $this->container['entered_by'] = $entered_by;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id The unique identifier of the customer who initiated the return.
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            throw new \InvalidArgumentException('non-nullable customer_id cannot be null');
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount The amount of the return.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets reported_condition
     *
     * @return string|null
     */
    public function getReportedCondition()
    {
        return $this->container['reported_condition'];
    }

    /**
     * Sets reported_condition
     *
     * @param string|null $reported_condition The condition of the returned item.
     *
     * @return self
     */
    public function setReportedCondition($reported_condition)
    {
        if (is_null($reported_condition)) {
            throw new \InvalidArgumentException('non-nullable reported_condition cannot be null');
        }
        $this->container['reported_condition'] = $reported_condition;

        return $this;
    }

    /**
     * Gets tax_refunded
     *
     * @return string|null
     */
    public function getTaxRefunded()
    {
        return $this->container['tax_refunded'];
    }

    /**
     * Sets tax_refunded
     *
     * @param string|null $tax_refunded The amount of tax refunded.
     *
     * @return self
     */
    public function setTaxRefunded($tax_refunded)
    {
        if (is_null($tax_refunded)) {
            throw new \InvalidArgumentException('non-nullable tax_refunded cannot be null');
        }
        $this->container['tax_refunded'] = $tax_refunded;

        return $this;
    }

    /**
     * Gets total_refunded
     *
     * @return string|null
     */
    public function getTotalRefunded()
    {
        return $this->container['total_refunded'];
    }

    /**
     * Sets total_refunded
     *
     * @param string|null $total_refunded The total amount refunded.
     *
     * @return self
     */
    public function setTotalRefunded($total_refunded)
    {
        if (is_null($total_refunded)) {
            throw new \InvalidArgumentException('non-nullable total_refunded cannot be null');
        }
        $this->container['total_refunded'] = $total_refunded;

        return $this;
    }

    /**
     * Gets created_string
     *
     * @return string|null
     */
    public function getCreatedString()
    {
        return $this->container['created_string'];
    }

    /**
     * Sets created_string
     *
     * @param string|null $created_string The string the return was created.
     *
     * @return self
     */
    public function setCreatedString($created_string)
    {
        if (is_null($created_string)) {
            throw new \InvalidArgumentException('non-nullable created_string cannot be null');
        }
        $this->container['created_string'] = $created_string;

        return $this;
    }

    /**
     * Gets reason_category
     *
     * @return string|null
     */
    public function getReasonCategory()
    {
        return $this->container['reason_category'];
    }

    /**
     * Sets reason_category
     *
     * @param string|null $reason_category The category of the reason for the return.
     *
     * @return self
     */
    public function setReasonCategory($reason_category)
    {
        if (is_null($reason_category)) {
            throw new \InvalidArgumentException('non-nullable reason_category cannot be null');
        }
        $this->container['reason_category'] = $reason_category;

        return $this;
    }

    /**
     * Gets flat_rate_shipping
     *
     * @return int|null
     */
    public function getFlatRateShipping()
    {
        return $this->container['flat_rate_shipping'];
    }

    /**
     * Sets flat_rate_shipping
     *
     * @param int|null $flat_rate_shipping The flat rate shipping amount.
     *
     * @return self
     */
    public function setFlatRateShipping($flat_rate_shipping)
    {
        if (is_null($flat_rate_shipping)) {
            throw new \InvalidArgumentException('non-nullable flat_rate_shipping cannot be null');
        }
        $this->container['flat_rate_shipping'] = $flat_rate_shipping;

        return $this;
    }

    /**
     * Gets refunded_string
     *
     * @return string|null
     */
    public function getRefundedString()
    {
        return $this->container['refunded_string'];
    }

    /**
     * Sets refunded_string
     *
     * @param string|null $refunded_string The string the return was refunded.
     *
     * @return self
     */
    public function setRefundedString($refunded_string)
    {
        if (is_null($refunded_string)) {
            throw new \InvalidArgumentException('non-nullable refunded_string cannot be null');
        }
        $this->container['refunded_string'] = $refunded_string;

        return $this;
    }

    /**
     * Gets warehouse_received_string
     *
     * @return string|null
     */
    public function getWarehouseReceivedString()
    {
        return $this->container['warehouse_received_string'];
    }

    /**
     * Sets warehouse_received_string
     *
     * @param string|null $warehouse_received_string The string the return was received at the warehouse.
     *
     * @return self
     */
    public function setWarehouseReceivedString($warehouse_received_string)
    {
        if (is_null($warehouse_received_string)) {
            throw new \InvalidArgumentException('non-nullable warehouse_received_string cannot be null');
        }
        $this->container['warehouse_received_string'] = $warehouse_received_string;

        return $this;
    }

    /**
     * Gets warehouse_condition_string
     *
     * @return string|null
     */
    public function getWarehouseConditionString()
    {
        return $this->container['warehouse_condition_string'];
    }

    /**
     * Sets warehouse_condition_string
     *
     * @param string|null $warehouse_condition_string The string the condition of the return was verified at the warehouse.
     *
     * @return self
     */
    public function setWarehouseConditionString($warehouse_condition_string)
    {
        if (is_null($warehouse_condition_string)) {
            throw new \InvalidArgumentException('non-nullable warehouse_condition_string cannot be null');
        }
        $this->container['warehouse_condition_string'] = $warehouse_condition_string;

        return $this;
    }

    /**
     * Gets fedex_status
     *
     * @return string|null
     */
    public function getFedexStatus()
    {
        return $this->container['fedex_status'];
    }

    /**
     * Sets fedex_status
     *
     * @param string|null $fedex_status The status of the return in FedEx.
     *
     * @return self
     */
    public function setFedexStatus($fedex_status)
    {
        if (is_null($fedex_status)) {
            throw new \InvalidArgumentException('non-nullable fedex_status cannot be null');
        }
        $this->container['fedex_status'] = $fedex_status;

        return $this;
    }

    /**
     * Gets scanned_serial_number
     *
     * @return string|null
     */
    public function getScannedSerialNumber()
    {
        return $this->container['scanned_serial_number'];
    }

    /**
     * Sets scanned_serial_number
     *
     * @param string|null $scanned_serial_number The serial number of the returned item.
     *
     * @return self
     */
    public function setScannedSerialNumber($scanned_serial_number)
    {
        if (is_null($scanned_serial_number)) {
            throw new \InvalidArgumentException('non-nullable scanned_serial_number cannot be null');
        }
        $this->container['scanned_serial_number'] = $scanned_serial_number;

        return $this;
    }

    /**
     * Gets match
     *
     * @return string|null
     */
    public function getMatch()
    {
        return $this->container['match'];
    }

    /**
     * Sets match
     *
     * @param string|null $match Whether or not the serial number matches the order.
     *
     * @return self
     */
    public function setMatch($match)
    {
        if (is_null($match)) {
            throw new \InvalidArgumentException('non-nullable match cannot be null');
        }
        $this->container['match'] = $match;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country The country of the customer who initiated the return.
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string|null
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string|null $serial_number The serial number of the returned item.
     *
     * @return self
     */
    public function setSerialNumber($serial_number)
    {
        if (is_null($serial_number)) {
            throw new \InvalidArgumentException('non-nullable serial_number cannot be null');
        }
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string|null
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string|null $condition The condition of the returned item.
     *
     * @return self
     */
    public function setCondition($condition)
    {
        if (is_null($condition)) {
            throw new \InvalidArgumentException('non-nullable condition cannot be null');
        }
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets order_refunded
     *
     * @return bool|null
     */
    public function getOrderRefunded()
    {
        return $this->container['order_refunded'];
    }

    /**
     * Sets order_refunded
     *
     * @param bool|null $order_refunded Whether or not the order was refunded.
     *
     * @return self
     */
    public function setOrderRefunded($order_refunded)
    {
        if (is_null($order_refunded)) {
            throw new \InvalidArgumentException('non-nullable order_refunded cannot be null');
        }
        $this->container['order_refunded'] = $order_refunded;

        return $this;
    }

    /**
     * Gets workflow_id
     *
     * @return string|null
     */
    public function getWorkflowId()
    {
        return $this->container['workflow_id'];
    }

    /**
     * Sets workflow_id
     *
     * @param string|null $workflow_id The workflow ID associated with the return.
     *
     * @return self
     */
    public function setWorkflowId($workflow_id)
    {
        if (is_null($workflow_id)) {
            throw new \InvalidArgumentException('non-nullable workflow_id cannot be null');
        }
        $this->container['workflow_id'] = $workflow_id;

        return $this;
    }

    /**
     * Gets sso_id
     *
     * @return string|null
     */
    public function getSsoId()
    {
        return $this->container['sso_id'];
    }

    /**
     * Sets sso_id
     *
     * @param string|null $sso_id The unique identifier of the SSO user who initiated the return.
     *
     * @return self
     */
    public function setSsoId($sso_id)
    {
        if (is_null($sso_id)) {
            throw new \InvalidArgumentException('non-nullable sso_id cannot be null');
        }
        $this->container['sso_id'] = $sso_id;

        return $this;
    }

    /**
     * Gets customer_email_normalized
     *
     * @return string|null
     */
    public function getCustomerEmailNormalized()
    {
        return $this->container['customer_email_normalized'];
    }

    /**
     * Sets customer_email_normalized
     *
     * @param string|null $customer_email_normalized The normalized email address of the customer who initiated the return.
     *
     * @return self
     */
    public function setCustomerEmailNormalized($customer_email_normalized)
    {
        if (is_null($customer_email_normalized)) {
            throw new \InvalidArgumentException('non-nullable customer_email_normalized cannot be null');
        }
        $this->container['customer_email_normalized'] = $customer_email_normalized;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



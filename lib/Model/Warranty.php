<?php
/**
 * Warranty
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stateset
 *
 * This is the Stateset One API based on The OpenAPI Specification. # Introduction This API definition is intended to to be a good starting point for describing your API in [OpenAPI/Swagger format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md). # OpenAPI Specification The goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined via OpenAPI, a consumer can  understand and interact with the remote service with a minimal amount of implementation logic. Similar to what interfaces have done for lower-level programming, OpenAPI removes the guesswork in calling the service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developers@stateset.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Warranty Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Warranty implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Warranty';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'warranty_number' => 'string',
        'warranty_name' => 'string',
        'warranty_type' => 'string',
        'created_date' => '\DateTime',
        'expiration_date' => '\DateTime',
        'order_id' => 'string',
        'description' => 'string',
        'status' => 'string',
        'issue' => 'string',
        'tracking_number' => 'string',
        'action_needed' => 'string',
        'customer_email' => 'string',
        'rma' => 'string',
        'zendesk_number' => 'string',
        'entered_by' => 'string',
        'order_date' => '\DateTime',
        'shipped_date' => '\DateTime',
        'requested_date' => '\DateTime',
        'condition' => 'string',
        'reported_condition' => 'string',
        'amount' => 'string',
        'tax_refunded' => 'string',
        'total_refunded' => 'string',
        'created_date' => '\DateTime',
        'serial_number' => 'string',
        'reason_category' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'string',
        'warranty_number' => null,
        'warranty_name' => null,
        'warranty_type' => null,
        'created_date' => 'date-time',
        'expiration_date' => 'date-time',
        'order_id' => null,
        'description' => null,
        'status' => null,
        'issue' => null,
        'tracking_number' => null,
        'action_needed' => null,
        'customer_email' => null,
        'rma' => null,
        'zendesk_number' => null,
        'entered_by' => null,
        'order_date' => 'date-time',
        'shipped_date' => 'date-time',
        'requested_date' => 'date-time',
        'condition' => null,
        'reported_condition' => null,
        'amount' => null,
        'tax_refunded' => null,
        'total_refunded' => null,
        'created_date' => 'date-time',
        'serial_number' => null,
        'reason_category' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'warranty_number' => false,
		'warranty_name' => false,
		'warranty_type' => false,
		'created_date' => false,
		'expiration_date' => false,
		'order_id' => false,
		'description' => false,
		'status' => false,
		'issue' => false,
		'tracking_number' => false,
		'action_needed' => false,
		'customer_email' => false,
		'rma' => false,
		'zendesk_number' => false,
		'entered_by' => false,
		'order_date' => false,
		'shipped_date' => false,
		'requested_date' => false,
		'condition' => false,
		'reported_condition' => false,
		'amount' => false,
		'tax_refunded' => false,
		'total_refunded' => false,
		'created_date' => false,
		'serial_number' => false,
		'reason_category' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'warranty_number' => 'warrantyNumber',
        'warranty_name' => 'warrantyName',
        'warranty_type' => 'warrantyType',
        'created_date' => 'createdDate',
        'expiration_date' => 'expirationDate',
        'order_id' => 'order_id',
        'description' => 'description',
        'status' => 'status',
        'issue' => 'issue',
        'tracking_number' => 'tracking_number',
        'action_needed' => 'action_needed',
        'customer_email' => 'customerEmail',
        'rma' => 'rma',
        'zendesk_number' => 'zendesk_number',
        'entered_by' => 'enteredBy',
        'order_date' => 'order_date',
        'shipped_date' => 'shipped_date',
        'requested_date' => 'requested_date',
        'condition' => 'condition',
        'reported_condition' => 'reported_condition',
        'amount' => 'amount',
        'tax_refunded' => 'tax_refunded',
        'total_refunded' => 'total_refunded',
        'created_date' => 'created_date',
        'serial_number' => 'serial_number',
        'reason_category' => 'reason_category'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'warranty_number' => 'setWarrantyNumber',
        'warranty_name' => 'setWarrantyName',
        'warranty_type' => 'setWarrantyType',
        'created_date' => 'setCreatedDate',
        'expiration_date' => 'setExpirationDate',
        'order_id' => 'setOrderId',
        'description' => 'setDescription',
        'status' => 'setStatus',
        'issue' => 'setIssue',
        'tracking_number' => 'setTrackingNumber',
        'action_needed' => 'setActionNeeded',
        'customer_email' => 'setCustomerEmail',
        'rma' => 'setRma',
        'zendesk_number' => 'setZendeskNumber',
        'entered_by' => 'setEnteredBy',
        'order_date' => 'setOrderDate',
        'shipped_date' => 'setShippedDate',
        'requested_date' => 'setRequestedDate',
        'condition' => 'setCondition',
        'reported_condition' => 'setReportedCondition',
        'amount' => 'setAmount',
        'tax_refunded' => 'setTaxRefunded',
        'total_refunded' => 'setTotalRefunded',
        'created_date' => 'setCreatedDate',
        'serial_number' => 'setSerialNumber',
        'reason_category' => 'setReasonCategory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'warranty_number' => 'getWarrantyNumber',
        'warranty_name' => 'getWarrantyName',
        'warranty_type' => 'getWarrantyType',
        'created_date' => 'getCreatedDate',
        'expiration_date' => 'getExpirationDate',
        'order_id' => 'getOrderId',
        'description' => 'getDescription',
        'status' => 'getStatus',
        'issue' => 'getIssue',
        'tracking_number' => 'getTrackingNumber',
        'action_needed' => 'getActionNeeded',
        'customer_email' => 'getCustomerEmail',
        'rma' => 'getRma',
        'zendesk_number' => 'getZendeskNumber',
        'entered_by' => 'getEnteredBy',
        'order_date' => 'getOrderDate',
        'shipped_date' => 'getShippedDate',
        'requested_date' => 'getRequestedDate',
        'condition' => 'getCondition',
        'reported_condition' => 'getReportedCondition',
        'amount' => 'getAmount',
        'tax_refunded' => 'getTaxRefunded',
        'total_refunded' => 'getTotalRefunded',
        'created_date' => 'getCreatedDate',
        'serial_number' => 'getSerialNumber',
        'reason_category' => 'getReasonCategory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('warranty_number', $data ?? [], null);
        $this->setIfExists('warranty_name', $data ?? [], null);
        $this->setIfExists('warranty_type', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('issue', $data ?? [], null);
        $this->setIfExists('tracking_number', $data ?? [], null);
        $this->setIfExists('action_needed', $data ?? [], null);
        $this->setIfExists('customer_email', $data ?? [], null);
        $this->setIfExists('rma', $data ?? [], null);
        $this->setIfExists('zendesk_number', $data ?? [], null);
        $this->setIfExists('entered_by', $data ?? [], null);
        $this->setIfExists('order_date', $data ?? [], null);
        $this->setIfExists('shipped_date', $data ?? [], null);
        $this->setIfExists('requested_date', $data ?? [], null);
        $this->setIfExists('condition', $data ?? [], null);
        $this->setIfExists('reported_condition', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('tax_refunded', $data ?? [], null);
        $this->setIfExists('total_refunded', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('serial_number', $data ?? [], null);
        $this->setIfExists('reason_category', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets warranty_number
     *
     * @return string|null
     */
    public function getWarrantyNumber()
    {
        return $this->container['warranty_number'];
    }

    /**
     * Sets warranty_number
     *
     * @param string|null $warranty_number warranty_number
     *
     * @return self
     */
    public function setWarrantyNumber($warranty_number)
    {
        if (is_null($warranty_number)) {
            throw new \InvalidArgumentException('non-nullable warranty_number cannot be null');
        }
        $this->container['warranty_number'] = $warranty_number;

        return $this;
    }

    /**
     * Gets warranty_name
     *
     * @return string|null
     */
    public function getWarrantyName()
    {
        return $this->container['warranty_name'];
    }

    /**
     * Sets warranty_name
     *
     * @param string|null $warranty_name warranty_name
     *
     * @return self
     */
    public function setWarrantyName($warranty_name)
    {
        if (is_null($warranty_name)) {
            throw new \InvalidArgumentException('non-nullable warranty_name cannot be null');
        }
        $this->container['warranty_name'] = $warranty_name;

        return $this;
    }

    /**
     * Gets warranty_type
     *
     * @return string|null
     */
    public function getWarrantyType()
    {
        return $this->container['warranty_type'];
    }

    /**
     * Sets warranty_type
     *
     * @param string|null $warranty_type warranty_type
     *
     * @return self
     */
    public function setWarrantyType($warranty_type)
    {
        if (is_null($warranty_type)) {
            throw new \InvalidArgumentException('non-nullable warranty_type cannot be null');
        }
        $this->container['warranty_type'] = $warranty_type;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime|null $expiration_date expiration_date
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id order_id
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets issue
     *
     * @return string|null
     */
    public function getIssue()
    {
        return $this->container['issue'];
    }

    /**
     * Sets issue
     *
     * @param string|null $issue issue
     *
     * @return self
     */
    public function setIssue($issue)
    {
        if (is_null($issue)) {
            throw new \InvalidArgumentException('non-nullable issue cannot be null');
        }
        $this->container['issue'] = $issue;

        return $this;
    }

    /**
     * Gets tracking_number
     *
     * @return string|null
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     *
     * @param string|null $tracking_number tracking_number
     *
     * @return self
     */
    public function setTrackingNumber($tracking_number)
    {
        if (is_null($tracking_number)) {
            throw new \InvalidArgumentException('non-nullable tracking_number cannot be null');
        }
        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets action_needed
     *
     * @return string|null
     */
    public function getActionNeeded()
    {
        return $this->container['action_needed'];
    }

    /**
     * Sets action_needed
     *
     * @param string|null $action_needed action_needed
     *
     * @return self
     */
    public function setActionNeeded($action_needed)
    {
        if (is_null($action_needed)) {
            throw new \InvalidArgumentException('non-nullable action_needed cannot be null');
        }
        $this->container['action_needed'] = $action_needed;

        return $this;
    }

    /**
     * Gets customer_email
     *
     * @return string|null
     */
    public function getCustomerEmail()
    {
        return $this->container['customer_email'];
    }

    /**
     * Sets customer_email
     *
     * @param string|null $customer_email customer_email
     *
     * @return self
     */
    public function setCustomerEmail($customer_email)
    {
        if (is_null($customer_email)) {
            throw new \InvalidArgumentException('non-nullable customer_email cannot be null');
        }
        $this->container['customer_email'] = $customer_email;

        return $this;
    }

    /**
     * Gets rma
     *
     * @return string|null
     */
    public function getRma()
    {
        return $this->container['rma'];
    }

    /**
     * Sets rma
     *
     * @param string|null $rma rma
     *
     * @return self
     */
    public function setRma($rma)
    {
        if (is_null($rma)) {
            throw new \InvalidArgumentException('non-nullable rma cannot be null');
        }
        $this->container['rma'] = $rma;

        return $this;
    }

    /**
     * Gets zendesk_number
     *
     * @return string|null
     */
    public function getZendeskNumber()
    {
        return $this->container['zendesk_number'];
    }

    /**
     * Sets zendesk_number
     *
     * @param string|null $zendesk_number zendesk_number
     *
     * @return self
     */
    public function setZendeskNumber($zendesk_number)
    {
        if (is_null($zendesk_number)) {
            throw new \InvalidArgumentException('non-nullable zendesk_number cannot be null');
        }
        $this->container['zendesk_number'] = $zendesk_number;

        return $this;
    }

    /**
     * Gets entered_by
     *
     * @return string|null
     */
    public function getEnteredBy()
    {
        return $this->container['entered_by'];
    }

    /**
     * Sets entered_by
     *
     * @param string|null $entered_by entered_by
     *
     * @return self
     */
    public function setEnteredBy($entered_by)
    {
        if (is_null($entered_by)) {
            throw new \InvalidArgumentException('non-nullable entered_by cannot be null');
        }
        $this->container['entered_by'] = $entered_by;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return \DateTime|null
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param \DateTime|null $order_date order_date
     *
     * @return self
     */
    public function setOrderDate($order_date)
    {
        if (is_null($order_date)) {
            throw new \InvalidArgumentException('non-nullable order_date cannot be null');
        }
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets shipped_date
     *
     * @return \DateTime|null
     */
    public function getShippedDate()
    {
        return $this->container['shipped_date'];
    }

    /**
     * Sets shipped_date
     *
     * @param \DateTime|null $shipped_date shipped_date
     *
     * @return self
     */
    public function setShippedDate($shipped_date)
    {
        if (is_null($shipped_date)) {
            throw new \InvalidArgumentException('non-nullable shipped_date cannot be null');
        }
        $this->container['shipped_date'] = $shipped_date;

        return $this;
    }

    /**
     * Gets requested_date
     *
     * @return \DateTime|null
     */
    public function getRequestedDate()
    {
        return $this->container['requested_date'];
    }

    /**
     * Sets requested_date
     *
     * @param \DateTime|null $requested_date requested_date
     *
     * @return self
     */
    public function setRequestedDate($requested_date)
    {
        if (is_null($requested_date)) {
            throw new \InvalidArgumentException('non-nullable requested_date cannot be null');
        }
        $this->container['requested_date'] = $requested_date;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string|null
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string|null $condition condition
     *
     * @return self
     */
    public function setCondition($condition)
    {
        if (is_null($condition)) {
            throw new \InvalidArgumentException('non-nullable condition cannot be null');
        }
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets reported_condition
     *
     * @return string|null
     */
    public function getReportedCondition()
    {
        return $this->container['reported_condition'];
    }

    /**
     * Sets reported_condition
     *
     * @param string|null $reported_condition reported_condition
     *
     * @return self
     */
    public function setReportedCondition($reported_condition)
    {
        if (is_null($reported_condition)) {
            throw new \InvalidArgumentException('non-nullable reported_condition cannot be null');
        }
        $this->container['reported_condition'] = $reported_condition;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets tax_refunded
     *
     * @return string|null
     */
    public function getTaxRefunded()
    {
        return $this->container['tax_refunded'];
    }

    /**
     * Sets tax_refunded
     *
     * @param string|null $tax_refunded tax_refunded
     *
     * @return self
     */
    public function setTaxRefunded($tax_refunded)
    {
        if (is_null($tax_refunded)) {
            throw new \InvalidArgumentException('non-nullable tax_refunded cannot be null');
        }
        $this->container['tax_refunded'] = $tax_refunded;

        return $this;
    }

    /**
     * Gets total_refunded
     *
     * @return string|null
     */
    public function getTotalRefunded()
    {
        return $this->container['total_refunded'];
    }

    /**
     * Sets total_refunded
     *
     * @param string|null $total_refunded total_refunded
     *
     * @return self
     */
    public function setTotalRefunded($total_refunded)
    {
        if (is_null($total_refunded)) {
            throw new \InvalidArgumentException('non-nullable total_refunded cannot be null');
        }
        $this->container['total_refunded'] = $total_refunded;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string|null
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string|null $serial_number serial_number
     *
     * @return self
     */
    public function setSerialNumber($serial_number)
    {
        if (is_null($serial_number)) {
            throw new \InvalidArgumentException('non-nullable serial_number cannot be null');
        }
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets reason_category
     *
     * @return string|null
     */
    public function getReasonCategory()
    {
        return $this->container['reason_category'];
    }

    /**
     * Sets reason_category
     *
     * @param string|null $reason_category reason_category
     *
     * @return self
     */
    public function setReasonCategory($reason_category)
    {
        if (is_null($reason_category)) {
            throw new \InvalidArgumentException('non-nullable reason_category cannot be null');
        }
        $this->container['reason_category'] = $reason_category;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


